# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'IP_Calc.ui'
# Created by: PyQt5 UI code generator 5.15.10
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5.QtWidgets import QMainWindow, QGridLayout, QVBoxLayout, QLabel, QLineEdit, QPushButton, QTableWidget, QTableWidgetItem, QMessageBox, QWidget
from PyQt5.QtCore import QSize, QMetaObject, QCoreApplication
from PyQt5 import Qt
import mysql.connector as sql

class IP_Calc(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("An Index Calculating #6")
        self.setGeometry(200, 200, 800, 600)

        self.mydb = self.SQL()

        #Mengatur Semua Widget berdasarkan GridLayout dan set Central Widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        self.gridLayoutWindow = QGridLayout(central_widget)

        #Membuat Layout dengan Text dan inputan label Nama Mahasiswa
        self.NamaMahasiswa = QVBoxLayout()
        self.LabelNama = QLabel("Nama Mahasiswa:")
        self.NamaMahasiswa.addWidget(self.LabelNama)
        self.lineEdit = QLineEdit()
        self.NamaMahasiswa.addWidget(self.lineEdit)
        self.gridLayoutWindow.addLayout(self.NamaMahasiswa, 0, 0, 1, 1)

        #Membuat Layout dengan Text dan inputan label NPM
        self.NPM = QVBoxLayout()
        self.LabelNPM = QLabel("NPM :")
        self.NPM.addWidget(self.LabelNPM)
        self.lineEdit2 = QLineEdit()
        self.NPM.addWidget(self.lineEdit2)
        self.gridLayoutWindow.addLayout(self.NPM, 1, 0, 1, 1)
        
        #Membuat Layout dengan Text dan inputan label Jurusan
        self.Jurusan = QVBoxLayout()
        self.LabelJurusan = QLabel("Jurusan :")
        self.Jurusan.addWidget(self.LabelJurusan)
        self.lineEdit3 = QLineEdit()
        self.Jurusan.addWidget(self.lineEdit3)
        self.gridLayoutWindow.addLayout(self.Jurusan, 2, 0, 1, 1)

        #Membuat Layout dengan Text dan inputan label Semester
        self.Semester = QVBoxLayout()
        self.LabelSemester = QLabel("Semester :")
        self.Semester.addWidget(self.LabelSemester)
        self.lineEdit4 = QLineEdit()
        self.Semester.addWidget(self.lineEdit4)
        self.gridLayoutWindow.addLayout(self.Semester, 3, 0, 1, 1)

        #Layout 4 Button
        self.ButtonLayout = QGridLayout()

        self.Keterangan = QPushButton("Tambah/Keterangan")
        self.Keterangan.clicked.connect(lambda: self.tambah(self.mydb))
        self.ButtonLayout.addWidget(self.Keterangan, 0, 0, 1, 1)

        self.IndeksPrestasi = QPushButton("Indeks Prestasi")
        self.IndeksPrestasi.clicked.connect(lambda: self.indeksprestasi(self.mydb))
        self.ButtonLayout.addWidget(self.IndeksPrestasi, 0, 1, 1, 1)

        self.Perbarui = QPushButton("Perbarui")
        self.Perbarui.clicked.connect(lambda: self.perbarui(self.mydb))
        self.ButtonLayout.addWidget(self.Perbarui, 1, 0, 1, 1)

        self.Hapus = QPushButton("Hapus")
        self.Hapus.clicked.connect(lambda: self.hapus(self.mydb))
        self.ButtonLayout.addWidget(self.Hapus, 1, 1, 1, 1)

        self.gridLayoutWindow.addLayout(self.ButtonLayout, 4, 0, 1, 1)

        #Layout Daftar Mahasiswa
        self.DaftarMahasiswa = QGridLayout()
        self.LabelDaftarMahasiswa = QLabel("Daftar Mahasiswa:")
        self.DaftarMahasiswa.addWidget(self.LabelDaftarMahasiswa, 0, 0, 1, 1)
        self.gridLayoutWindow.addLayout(self.DaftarMahasiswa, 0, 1, 1, 1)

        #Layout Table Widget Daftar Mahasiswa
        column_list_mhs = ["Mahasiswa", "NPM", "Jurusan", "Semester", "IP"]
        self.ListMahasiswa = QTableWidget()
        self.ListMahasiswa.setColumnCount(len(column_list_mhs))
        self.ListMahasiswa.setHorizontalHeaderLabels(column_list_mhs)
        self.gridLayoutWindow.addWidget(self.ListMahasiswa, 1, 1, 6, 1)

        #Layout Table Widget Indeks Prestasi
        column_list_IP = ["Kode", "Mata Kuliah", "SKS", "Nilai", "Bobot", "N.Huruf", "Kelulusan"]
        self.IP = QTableWidget()
        self.IP.setColumnCount(7)
        self.IP.setHorizontalHeaderLabels(column_list_IP)
        self.gridLayoutWindow.addWidget(self.IP, 5, 0, 1, 1)

        #Layout Table Widget Total Output
        row_list_total = ["Jumlah SKS", "IP Semester"]
        self.Total = QTableWidget()
        self.Total.setRowCount(2)
        self.Total.setVerticalHeaderLabels(row_list_total)
        self.gridLayoutWindow.addWidget(self.Total, 6, 0, 1, 1)

        self.select_tablemahasiswa(self.mydb)

    #Fungsi menghubungkan SQL
    def SQL(self):
        try:
            mydb = sql.connect(
                host = "localhost",
                user = "root",
                password = "",
                database = "ip_calc"
            )
            print("Terkoneksi dengan MySQL!")
            return mydb
        except sql.Error:
            QMessageBox.warning(self, 'Peringatan', 'MySQL belum dinyalakan!\nData yang akan dieksekusi tidak dapat tersimpan.')

    #Fungsi menambahkan keterangan pada TableWdiget IP
    def tambah(self, mydb):
        try:
            mycursor = mydb.cursor()

            Nama = self.lineEdit.text()
            NPM = self.lineEdit2.text()
            Jurusan = self.lineEdit3.text()
            Semester = self.lineEdit4.text()

            query_mhs = "INSERT INTO `mahasiswa` (`Nama`, `NPM`, `Jurusan`, `Semester`) VALUES (%s, %s, %s, %s)"
            values = (Nama, NPM, Jurusan, Semester)
            mycursor.execute(query_mhs, values)

            if Jurusan == "Teknik Informatika" and Semester == "3":
                query_tableip1 = "SELECT `Kode`, `Nama_Matkul`, `SKS` FROM `matakuliah`;"
                mycursor.execute(query_tableip1)
                result = mycursor.fetchall()

                self.IP.setRowCount(len(result))
                for row_index, row_data in enumerate(result):
                    for col_index, col_data in enumerate(row_data):
                        item = QTableWidgetItem(str(col_data))
                        self.IP.setItem(row_index, col_index, item)

            self.mydb.commit()
            print("Data berhasil ditambahkan ke database.")
            QMessageBox.information(self, 'Informasi', 'Inputkan nilai dari setiap mata kuliah pada kolom Nilai!')
        except sql.Error as err:
            print(f"Error: {err}")
            QMessageBox.warning(self, 'Peringatan', 'Terjadi kesalahan saat menambahkan data ke database.')
    
    #Fungsi pengeksekusian indeksprestasi pada TableWidgetIP
    def indeksprestasi(self, mydb):
        try:
            mycursor = mydb.cursor()

            total_sks = 0
            total_IP_Semester = 0

            NPM = self.lineEdit2.text()
            Jurusan = self.lineEdit3.text()
            Semester = self.lineEdit4.text()


            query_ip2 = """2
            SELECT matakuliah.`Kode`, matakuliah.`Nama_Matkul`, matakuliah.`SKS`, nilaiip.`Nilai`, 
                   nilaiip.`Bobot`, nilaiip.`NHuruf`, nilaiip.`Kelulusan`
            FROM `matakuliah` INNER JOIN `nilaiip` ON matakuliah.`Id_MataKuliah` = nilaiip.`Id_MataKuliah` 
            WHERE matakuliah.`NPM` = %s AND matakuliah.`Jurusan` = %s AND matakuliah.`Semester` = %s
        """
            mycursor.execute(query_ip2, (NPM, Jurusan, Semester))
            result = mycursor.fetchall()

            self.IP.setRowCount(len(result))
            for row_index, row_data in enumerate(result):
                for col_index, col_data in enumerate(row_data):
                    item = QTableWidgetItem(str(col_data))
                    self.IP.setItem(row_index, col_index, item)

                    if col_index == 3:
                        line_edit = QLineEdit(str(col_data))
                        line_edit.editingFinished.connect(lambda line_edit=line_edit, row_index=row_index: self.onNilaiChanged(line_edit, row_index))
                        self.IP.setCellWidget(row_index, 3, line_edit)

            self.onNilaiChanged(self.IP.item(row_index, 3), row_index)

            for row_mhs in result:
                total_sks += row_mhs[2]

                if row_mhs[4] is not None:
                    total_IP_Semester += row_mhs[4]

            self.Total.setItem(0, 0, QTableWidgetItem(str(total_sks)))
            self.Total.setItem(1, 0, QTableWidgetItem(str(total_IP_Semester)))

            ip_semester = total_IP_Semester / total_sks if total_sks > 0 else 0
            self.Total.setItem(2, 0, QTableWidgetItem(f"{ip_semester:.2f}"))

            query_up_ip = "UPDATE mahasiswa SET IP = %s WHERE NPM = %s AND Jurusan = %s AND Semester = %s"
            mycursor.execute(query_up_ip, (ip_semester, NPM, Jurusan, Semester))

            insert_query = """
            INSERT INTO nilaiip (Nilai, Bobot, NHuruf, Kelulusan, Id_Mahasiswa)
            VALUES ((SELECT Id_MataKuliah FROM matakuliah WHERE Kode = %s AND NPM = %s AND Jurusan = %s AND Semester = %s),
                    %s, %s, %s, %s)
        """
            for row_index in range(self.IP.rowCount()):
                nilai = float(self.IP.item(row_index, 3).text())
                Bobot, NHuruf, Kelulusan = self.CalculateIP(nilai)

                mycursor.execute(insert_query, (nilai, Bobot, NHuruf, Kelulusan))

            query_ListMhs = "SELECT `Nama`, `NPM`, `Jurusan`, `Semester`, `IP` FROM `mahasiswa` WHERE `NPM` = %s AND `Jurusan` = %s AND `Semester` = %s"
            mycursor.execute(query_ListMhs, (NPM, Jurusan, Semester))
            result_mhs = mycursor.fetchall()

            self.ListMahasiswa.setRowCount(len(result_mhs))
            for row_index, row_data in enumerate(result_mhs):
                for col_index, col_data in enumerate(row_data):
                    item = QTableWidgetItem(str(col_data))
                    self.ListMahasiswa.setItem(row_index, col_index, item)

            self.select_tablemahasiswa(self.mydb)

            self.mydb.commit()
            print("Data berhasil disimpan ke database.")
            QMessageBox.information(self, 'Informasi', 'Insert Indeks Prestasi Mahasiswa telah berhasil.')
        except sql.Error as err:
            print(f"Error: {err}")
            QMessageBox.warning(self, 'Peringatan', 'Terdapat kesalahan saat menyimpan Indeks Prestasi.')

    #Fungsi perhitungan dari inputan kolom nilai table IP
    def CalculateIP(self, input_nilai):
        input_nilai = float(input_nilai)
        if input_nilai >= 85:
            Bobot = 4.00
            NHuruf = 'A'
        elif 80 <= input_nilai < 85:
            Bobot = 3.67
            NHuruf = 'A-'
        elif 75 <= input_nilai < 80:
            Bobot = 3.33
            NHuruf = 'B+'
        elif 70 <= input_nilai < 75:
            Bobot = 3.00
            NHuruf = 'B'
        elif 65 <= input_nilai < 70:
            Bobot = 2.67
            NHuruf = 'B-'
        elif 60 <= input_nilai < 65:
            Bobot = 2.33
            NHuruf = 'C+'
        elif 55 <= input_nilai < 60:
            Bobot = 2.00
            NHuruf = 'C'
        elif 50 <= input_nilai < 55:
            Bobot = 1.67
            NHuruf = 'C-'
        elif 40 <= input_nilai < 50:
            Bobot = 1.00
            NHuruf = 'D'
        else:
            Bobot = 0.00
            NHuruf = 'E'
        Kelulusan = 'Lulus' if NHuruf not in ['D', 'E'] else 'Tidak Lulus'

        return Bobot, NHuruf, Kelulusan
    
    #Fungsi perubahan inputan pada table IP dengan menginput nilai maka akan memanggil fungsi CalculateIP
    def onNilaiChanged(self, line_edit, row_index):
        try:
            newvalue = float(line_edit.text())
            self.IP.setItem(row_index, 3, QTableWidgetItem(str(newvalue)))

            Bobot, NHuruf, Kelulusan = self.CalculateIP(newvalue)
            self.IP.setItem(row_index, 4, QTableWidgetItem(str(Bobot)))
            self.IP.setItem(row_index, 5, QTableWidgetItem(NHuruf))
            self.IP.setItem(row_index, 6, QTableWidgetItem(Kelulusan))

        except ValueError:
            QMessageBox.warning(self, 'Peringatan', 'Masukkan nilai yang valid.')

    #Fungsi untuk memperbarui tabel mahasiswa
    def perbarui(self, mydb):
        try:
            mycursor = mydb.cursor()

            Nama = self.lineEdit0.text()
            NPM = self.lineEdit2.text()
            Jurusan = self.lineEdit3.text()
            Semester = self.lineEdit4.text()

            query_update_nama = "UPDATE mahasiswa SET Nama = %s WHERE NPM = %s AND Jurusan = %s AND Semester = %s"
            mycursor.execute(query_update_nama, (Nama, NPM, Jurusan, Semester))

            for row_index in range(self.IP.rowCount()):
                kode_matkul = self.IP.item(row_index, 0).text()
                nilai = float(self.IP.item(row_index, 3).text())

                update_nilai_query = """
                    UPDATE nilaiip
                    SET Nilai = %s, Bobot = %s, NHuruf = %s, Kelulusan = %s
                    WHERE Id_MataKuliah = (SELECT Id_MataKuliah FROM matakuliah WHERE Kode = %s)
                """

                Bobot, NHuruf, Kelulusan = self.CalculateIP(nilai)
                mycursor.execute(update_nilai_query, (nilai, Bobot, NHuruf, Kelulusan, kode_matkul))

            self.select_tablemahasiswa(self.mydb)

            self.mydb.commit()
            print("Data mahasiswa dan nilai berhasil diperbarui.")
            QMessageBox.information(self, 'Informasi', 'Data mahasiswa dan nilai berhasil diperbarui.')

        except sql.Error as err:
            print(f"Error: {err}")
            QMessageBox.warning(self, 'Peringatan', 'Terjadi kesalahan saat memperbarui data mahasiswa dan nilai.')
            
    #Fungsi untuk menghapus index pada database
    def hapus(self, mydb):
        try:
            mycursor = mydb.cursor()

            Nama = self.lineEdit0.text()
            NPM = self.lineEdit2.text()
            Jurusan = self.lineEdit3.text()
            Semester = self.lineEdit4.text()

            delete_nilaiip_query = "DELETE FROM nilaiip WHERE NPM = %s AND Jurusan = %s AND Semester = %s"
            mycursor.execute(delete_nilaiip_query, (Nama, NPM, Jurusan, Semester))

            delete_mahasiswa_query = "DELETE FROM mahasiswa WHERE NPM = %s AND Jurusan = %s AND Semester = %s"
            mycursor.execute(delete_mahasiswa_query, (Nama, NPM, Jurusan, Semester))

            self.select_tablemahasiswa(self.mydb)

            self.mydb.commit()
            print("Data mahasiswa dan nilai berhasil dihapus.")
            QMessageBox.information(self, 'Informasi', 'Data mahasiswa dan nilai berhasil dihapus.')
        except sql.Error as err:
            print(f"Error: {err}")
            QMessageBox.warning(self, 'Peringatan', 'Terjadi kesalahan saat menghapus data mahasiswa dan nilai.')
            
    def showMahasiswaInfo(self, Nama, NPM, Jurusan, Semester, IP):
        self.LabelInfo.setText(f"Nama: {Nama}\nNPM: {NPM}\nJurusan: {Jurusan}\nSemester: {Semester}\nIP: {IP}")
        
    def onListMahasiswaClicked(self, item):
        row = item.row()
        Nama = self.ListMahasiswa.item(row, 0).text()
        NPM = self.ListMahasiswa.item(row, 1).text()
        Jurusan = self.ListMahasiswa.item(row, 2).text()
        Semester = self.ListMahasiswa.item(row, 3).text()
        IP = self.ListMahasiswa.item(row, 4).text()

        self.lineEdit.setText(Nama)
        self.lineEdit2.setText(NPM)
        self.lineEdit3.setText(Jurusan)
        self.lineEdit4.setText(Semester)
        self.lineEdit5.setText(IP)

        self.populateIPTable(NPM, Jurusan, Semester, self.mydb)

        if item.text() != "":
            self.lineEdit5.setText(item.text())
        else:
            self.lineEdit5.setText("")

    def populateIPTable(self, NPM, Jurusan, Semester, mydb):
        try:
            mycursor = mydb.cursor()

            query_ip = """
            SELECT matakuliah.`Kode`, matakuliah.`Nama_Matkul`, matakuliah.`SKS`, nilaiip.`Nilai`, 
                nilaiip.`Bobot`, nilaiip.`NHuruf`, nilaiip.`Kelulusan`
            FROM `matakuliah` INNER JOIN `nilaiip` ON matakuliah.`Id_MataKuliah` = nilaiip.`Id_MataKuliah` 
            WHERE matakuliah.`NPM` = %s AND matakuliah.`Jurusan` = %s AND matakuliah.`Semester` = %s
        """
            mycursor.execute(query_ip, (NPM, Jurusan, Semester))
            result = mycursor.fetchall()

            self.IP.setRowCount(len(result))
            for row_index, row_data in enumerate(result):
                for col_index, col_data in enumerate(row_data):
                    item = QTableWidgetItem(str(col_data))
                    self.IP.setItem(row_index, col_index, item)

                    if col_index == 3:
                        line_edit = QLineEdit(str(col_data))
                        line_edit.editingFinished.connect(lambda line_edit=line_edit, row_index=row_index: self.onNilaiChanged(line_edit, row_index))
                        self.IP.setCellWidget(row_index, 3, line_edit)

            total_sks = 0
            total_IP_Semester = 0

            for row_mhs in result:
                total_sks += row_mhs[2]

                if row_mhs[4] is not None:
                    total_IP_Semester += row_mhs[4]

            self.Total.setItem(0, 0, QTableWidgetItem(str(total_sks)))
            self.Total.setItem(1, 0, QTableWidgetItem(str(total_IP_Semester)))

            ip_semester = total_IP_Semester / total_sks if total_sks > 0 else 0
            self.Total.setItem(1, 0, QTableWidgetItem(str(ip_semester)))

            self.mydb.commit()
            print("Data nilai IP berhasil ditampilkan.")
        except sql.Error as err:
            print(f"Error: {err}")
            QMessageBox.warning(self, 'Peringatan', 'Terdapat kesalahan saat menampilkan data nilai IP.')

    #Menampilkan table mahasiswa
    def select_tablemahasiswa(self, mydb):
        try:
            mycursor = mydb.cursor()
            nama = self.lineEdit.text()
            npm = self.lineEdit2.text()
            jurusan = self.lineEdit3.text()
            semester = self.lineEdit4.text()

            query_mahasiswa = "SELECT `Nama`, `NPM`, `Jurusan`, `Semester` FROM `mahasiswa`"
            if nama:
                query_mahasiswa += f" AND `Nama` = '{nama}'"
            if npm:
                query_mahasiswa += f" AND `NPM` = '{npm}'"
            if jurusan:
                query_mahasiswa += f" AND `Jurusan` = '{jurusan}'"
            if semester:
                query_mahasiswa += f" AND `Semester` = '{semester}'"

            mycursor.execute(query_mahasiswa)
            result_mahasiswa = mycursor.fetchall()

            self.ListMahasiswa.setRowCount(len(result_mahasiswa))
            self.ListMahasiswa.setColumnCount(len(result_mahasiswa[0]))

            if result_mahasiswa:
                for row_index, row_data in enumerate(result_mahasiswa):
                    for col_index, col_data in enumerate(row_data):
                        item = QTableWidgetItem(str(col_data))
                        self.ListMahasiswa.setItem(row_index, col_index, item)

                print("Data mahasiswa berhasil ditampilkan.")
            else:
                print("Tidak ada data mahasiswa.")
        except sql.Error as err:
            print(f"Error: {err}")
            QMessageBox.warning(self, 'Peringatan', 'Terdapat kesalahan saat menampilkan data mahasiswa.')